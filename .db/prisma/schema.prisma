// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String  @id @default(uuid()) @db.Uuid
  firstName     String  @map("first_name") @db.VarChar(100)
  lastName      String  @map("last_name") @db.VarChar(100)
  username      String  @unique @db.VarChar(50)
  email         String  @unique @db.VarChar(100)
  passwordHash  String  @map("password_hash") @db.VarChar(255)
  avatarImageId String? @unique @map("avatar_image_id") @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  avatarImage        AvatarImage?               @relation("UserAvatarImage", fields: [avatarImageId], references: [id], onDelete: SetNull)
  ownedShelters      Shelter[]                  @relation("ShelterOwner")
  memberships        ShelterMember[]
  createdPets        Pet[]                      @relation("PetCreator")
  bookmarks          Bookmark[]
  sentMessages       Message[]                  @relation("Sender")
  receivedMessages   Message[]                  @relation("Receiver")
  messageAssignments ShelterMessageAssignment[]

  @@map("user")
}

model Shelter {
  id            String  @id @default(uuid()) @db.Uuid
  name          String  @db.VarChar(100)
  description   String?
  phone         String?
  email         String?
  website       String?
  ownerId       String  @map("owner_id") @db.Uuid
  avatarImageId String? @unique @map("avatar_image_id") @db.Uuid
  addressId     String? @map("address_id") @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  owner       User            @relation("ShelterOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  avatarImage AvatarImage?    @relation("ShelterAvatarImage", fields: [avatarImageId], references: [id], onDelete: SetNull)
  address     Address?
  members     ShelterMember[]
  pets        Pet[]
  messages    Message[]

  @@map("shelter")
}

model Address {
  id               String  @id @default(uuid()) @db.Uuid
  shelterId        String? @unique @db.Uuid
  address1         String  @db.VarChar(255)
  address2         String? @db.VarChar(255)
  formattedAddress String  @db.VarChar(255)
  city             String  @db.VarChar(100)
  region           String  @db.VarChar(100)
  postalCode       String  @db.VarChar(20)
  country          String  @db.VarChar(100)
  lat              Float
  lng              Float

  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  shelters Shelter? @relation(fields: [shelterId], references: [id])

  @@map("address")
}

model ShelterMember {
  shelterId String @map("shelter_id") @db.Uuid
  userId    String @map("user_id") @db.Uuid

  joinedAt DateTime @default(now()) @map("joined_at")

  shelter Shelter @relation(fields: [shelterId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([shelterId, userId])
  @@map("shelter_member")
}

model Pet {
  id              String    @id @default(uuid()) @db.Uuid
  name            String    @db.VarChar(50)
  description     String?
  species         String    @db.VarChar(50)
  breed           String    @db.VarChar(50)
  gender          String    @db.VarChar(50)
  birthDate       DateTime
  status          PetStatus @default(AVAILABLE)
  createdByUserId String?   @map("created_by_user_id") @db.Uuid
  shelterId       String?   @map("shelter_id") @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  creator   User?      @relation("PetCreator", fields: [createdByUserId], references: [id], onDelete: SetNull)
  shelter   Shelter?   @relation(fields: [shelterId], references: [id], onDelete: SetNull)
  petImages PetImage[]
  bookmarks Bookmark[]

  @@map("pet")
}

enum PetStatus {
  AVAILABLE
  ADOPTED
  PENDING
}

model Image {
  id       String @id @default(uuid()) @db.Uuid
  url      String @db.VarChar(255)
  key      String @unique @db.VarChar(255)
  bucket   String @db.VarChar(100)
  fileType String @db.VarChar(50)
  fileSize BigInt @map("file_size")

  uploadedAt DateTime @default(now()) @map("uploaded_at")

  // Relationships
  avatarImage AvatarImage? @relation("AvatarImageImage")
  petImage    PetImage?    @relation("PetImageImage")

  @@map("image")
}

model AvatarImage {
  id      String @id @default(uuid()) @db.Uuid
  imageId String @unique @map("image_id") @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  image   Image    @relation("AvatarImageImage", fields: [imageId], references: [id], onDelete: Cascade)
  user    User?    @relation("UserAvatarImage")
  shelter Shelter? @relation("ShelterAvatarImage")

  @@map("avatar_image")
}

model PetImage {
  id        String  @id @default(uuid()) @db.Uuid
  petId     String  @map("pet_id") @db.Uuid
  imageId   String  @unique @map("image_id") @db.Uuid
  isPrimary Boolean @default(false) @map("is_primary")

  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  pet   Pet   @relation(fields: [petId], references: [id], onDelete: Cascade)
  image Image @relation("PetImageImage", fields: [imageId], references: [id], onDelete: Cascade)

  @@map("pet_image")
}

model Bookmark {
  userId String @map("user_id") @db.Uuid
  petId  String @map("pet_id") @db.Uuid

  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  pet  Pet  @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@id([userId, petId])
  @@map("bookmark")
}

model Message {
  id         String  @id @default(uuid()) @db.Uuid
  senderId   String  @map("sender_id") @db.Uuid
  receiverId String  @map("receiver_id") @db.Uuid
  content    String
  isRead     Boolean @default(false) @map("is_read")
  shelterId  String? @map("shelter_id") @db.Uuid

  sentAt DateTime @default(now()) @map("sent_at")

  sender     User                      @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User                      @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  shelter    Shelter?                  @relation(fields: [shelterId], references: [id], onDelete: SetNull)
  assignment ShelterMessageAssignment?

  @@map("message")
}

model ShelterMessageAssignment {
  messageId String @id @map("message_id") @db.Uuid
  userId    String @map("user_id") @db.Uuid

  assignedAt DateTime @default(now()) @map("assigned_at")

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("shelter_message_assignment")
}
